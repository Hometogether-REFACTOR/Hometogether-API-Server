plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.asciidoctor.convert" version "1.5.9.2"
	id 'java'
}

group = 'hometoogether'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	/*Database*/
	runtimeOnly 'com.h2database:h2'
	implementation 'mysql:mysql-connector-java'

	/*AWS S3*/
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	/*Spring Rest Docs*/
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	/*JWT*/
	implementation 'io.jsonwebtoken:jjwt:0.9.0'

	/*Object Mapper*/
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

	implementation 'javax.servlet:jstl'

	implementation 'org.webjars:sockjs-client:1.5.1'
	implementation 'org.webjars:stomp-websocket:2.3.3'
	implementation 'org.webjars:webjars-locator-core'
	implementation 'org.webjars:bootstrap:3.3.7'
	implementation 'org.webjars:jquery:3.6.0'
	implementation 'junit:junit:4.12'

	implementation 'org.jcodec:jcodec:0.2.3'
	implementation 'org.jcodec:jcodec-javase:0.2.3'

	implementation 'org.springframework.boot:spring-boot-starter-websocket'
//	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor

	from file("build/asciidoc/html5/")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}
